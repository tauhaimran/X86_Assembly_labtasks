
;//include libraries here...

.386
.model flat,stdcall 
.stack 4096

ExitProcess PROTO , dwExitCode: DWORD

.data
	;>> initialize variables here...

	;lab6&7 variables
	arr db 100 dup(0);

.code	
	;>> set values and call proc.s here...
main proc 


	mov eax , -1
	call egx 
	call oddnums_in_arr
	mov eax,0
	mov al,3
	call is_it_prime
	mov al,9
	call is_it_prime

invoke ExitProcess , 0

main endp
	;>> ...define proc.s here...
egx proc
 mov eax,0
 mov ax,0
ret 
egx endp
;//***** lab - 6 & 7 practice *****

;............................................................................................
oddnums_in_arr proc ; Assembly program to store all the odd numbers from 1 to 100 in an array
mov ecx,0
	mov cl,100
	mov eax,0
		mov edi , offset arr

	L1:
		mov bx,ax
		AND bl,1
		cmp bl ,1
			jne do_not_add
				mov byte ptr [edi] , al
		do_not_add:
				inc ax
				inc edi
	loop L1

ret
oddnums_in_arr endp
;............................................................................................
is_it_prime proc ;assembly program to check whether a number is prime or not. 
				 ;If prime, move it in DL else move it in DH.
;al = number
mov ecx,0
mov ebx,0
mov edx,0 
	mov cl,al
	mov bl,al
	mov dh,al

	cmp al,3
	jle is_prime
	
	L1:
		mov al,dh
		mov bl,cl
		div bl
			;checking remainder
			cmp ah ,0
			jne not_prime
		mov eax,0
		LOOP L1

	is_prime:
		mov al,dh
		mov edx,0
			mov dl,al
	jmp end_prime_checking


	not_prime:
		mov al,dh
	
end_prime_checking:
ret
is_it_prime endp


;............................................................................................
;............................................................................................
	;>> it ends here...
end main

